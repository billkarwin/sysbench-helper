:
# create-data
# Copyright 2016 Karwin Software Solutions LLC

database="sysbench"
defaultsfile="$HOME/.my.cnf"
outputdir="sysbench-data"
partitions=4
partitionrows=10000
start=1
table="olaptest1"
verbose=0
cores=`grep -c '^processor' /proc/cpuinfo`

function usage
{
	cat <<_USAGE_
create-data - generate random data for Sysbench and load it quickly.

Usage:
-c <cores>	Run N concurrent processes (default $cores)
-d <database>	Name of database (default $database)
-f <path>	MySQL options file (default $defaultsfile)
-o <path>	Output CSV data to directory (default $outputdir)
-p <partitions> Number of partitions to generate (default $partitions)
-r <rows>	Number of rows per partition (default $partitionrows)
-s <start>	Start at partition N (default $start)
-t <table>	Name of table (default $table)
-v		Verbose output
_USAGE_
	exit 1
}

while getopts c:d:f:o:p:r:s:t:v opt
do
	case $opt in
	c) cores="$OPTARG" ;;
	d) database="$OPTARG" ;;
	f) defaultsfile="$OPTARG" ;;
	o) outputdir="$OPTARG" ;;
	p) partitions="$OPTARG" ;;
	r) partitionrows="$OPTARG" ;;
	s) start="$OPTARG" ;;
	t) table="$OPTARG" ;;
	v) verbose=1 ;;
	\?) usage ; exit 0 ;;
	esac
done

if [ -f "$defaultsfile" ]
then
	defaults="--defaults-extra-file=$defaultsfile"
fi

echo "Creating database $database and table $table..."
mysqladmin $defaults -f drop $database
mysqladmin $defaults create $database
(
	cat <<EOF
	CREATE TABLE $table (
	  id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
	  key1 BIGINT UNSIGNED NOT NULL,
	  key2 BIGINT UNSIGNED NOT NULL,
	  key3 BIGINT UNSIGNED NOT NULL,
	  nonkey01 CHAR(255) NOT NULL,
	  nonkey02 CHAR(255) NOT NULL,
	  nonkey03 CHAR(255) NOT NULL,
	  nonkey04 CHAR(255) NOT NULL,
	  nonkey05 CHAR(255) NOT NULL,
	  nonkey06 CHAR(255) NOT NULL,
	  nonkey07 CHAR(255) NOT NULL,
	  nonkey08 CHAR(255) NOT NULL,
	  nonkey09 CHAR(255) NOT NULL,
	  nonkey10 CHAR(255) NOT NULL,
	  nonkey11 CHAR(255) NOT NULL,
	  nonkey12 CHAR(255) NOT NULL,
	  nonkey13 CHAR(255) NOT NULL,
	  nonkey14 CHAR(255) NOT NULL,
	  nonkey15 CHAR(255) NOT NULL,
	  nonkey16 CHAR(255) NOT NULL,
	  nonkey17 CHAR(255) NOT NULL,
	  nonkey18 CHAR(255) NOT NULL,
	  nonkey19 CHAR(255) NOT NULL,
	  nonkey20 CHAR(255) NOT NULL,
	  nonkey21 CHAR(255) NOT NULL,
	  nonkey22 CHAR(255) NOT NULL,
	  nonkey23 CHAR(255) NOT NULL,
	  nonkey24 CHAR(255) NOT NULL,
	  nonkey25 CHAR(255) NOT NULL,
	  nonkey26 CHAR(255) NOT NULL,
	  nonkey27 CHAR(255) NOT NULL,
	  nonkey28 CHAR(255) NOT NULL,
	  nonkey29 CHAR(255) NOT NULL,
	  nonkey30 CHAR(255) NOT NULL,
	  pad TEXT,
	  KEY(key1, key2, key3)
	) PARTITION BY RANGE(id) (
EOF
	for p in `seq 0 $partitions`
	do
		echo "	  PARTITION p${p} VALUES LESS THAN (${p} * ${partitionrows}),"
	done
	cat <<EOF
	  PARTITION pMAX VALUES LESS THAN (MAXVALUE)
	);
EOF
	for p in `seq 1 $partitions`
	do
		cat <<EOF
		CREATE TABLE ${table}_$p LIKE ${table};
		ALTER TABLE ${table}_$p REMOVE PARTITIONING;
EOF
	done
) | mysql $defaults $database

echo "Creating CSV files..."
mkdir -p $outputdir

startpart=$start
while [ $startpart -le $partitions ]
do
	rm -rf $outputdir/*
	endpart=$((startpart + $cores - 1))
	endpart=$((endpart > partitions ? partitions : endpart))
	echo "Generating data for partitions $startpart through $endpart..."
	seq $startpart $endpart |
	xargs -n 1 -P $cores -I {} \
	  ./create-data.py $partitionrows {} $outputdir/${table}_{}

	echo "Loading data for partitions $startpart through $endpart..."
	find $outputdir -name "${table}_*" |
	xargs -n 1 -P $cores -I {} \
	  mysqlimport $defaults --local --fields-terminated-by=, $database {}
	startpart=$((startpart + cores))
done

echo "Done!"
