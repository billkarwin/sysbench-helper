:
# create-data
# Copyright 2016 Karwin Software Solutions LLC

database="sysbench"
defaultsfile="$HOME/.my.cnf"
outputdir="sysbench-data"
partitions=48
rows=1000000
table="sbtest1"
verbose=0

options=`getopt d:f:o:s:t:v $*`
if [ $? != 0 ]
then
	cat <<_USAGE_
create-data - generate random data for Sysbench and load it quickly.

Usage:
-d <database>	Name of database (default $database)
-f <path>	MySQL options file (default $defaultsfile)
-s <rows>	Size of the table in rows (default $rows)
-o <path>	Output CSV data to directory (default $outputdir)
-t <table>	Name of table (default $table)
-v		Verbose output

Note: the tables must be in file-per-table format.
_USAGE_
	exit 1
fi
eval set -- $options
while [ $# -gt 0 ]
do
	case "$1" in
	-d) database="$2" ; shift ; shift ;;
	-f) defaultsfile="$2" ; shift ; shift ;;
	-o) outputdir="$2" ; shift ; shift ;;
	-s) rows="$2" ; shift ; shift ;;
	-t) table="$2" ; shift ; shift ;;
	-v) verbose=1 ; shift ;;
	--) shift ; break ;;
	-*) usage ; exit 0 ;;
	*) break ;;
	esac
done

if [ -s "$defaultsfile" ]
then
	if [ -f "$defaultsfile" ]
	then
		defaults="--defaults-file=$defaultsfile"
	fi
fi

if [ ! -d $outputdir ] ; then
	echo "Creating CSV files..."
	time seq 1 $partitions |
	parallel --will-cite --eta --progress --results $outputdir \
	  "./create-data.py $rows {} $partitions" >/dev/null
	echo "Done creating CSV files."

	find $outputdir -name "stdout" -execdir mv {} $table \;
fi

echo "Creating database $database and table $table..."
mysql -e "CREATE DATABASE IF NOT EXISTS $database DEFAULT CHARSET=utf8mb4"
mysql $database -e "DROP TABLE IF EXISTS $table"
mysql $database -e "CREATE TABLE $table ( \
  id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY, \
  k INT UNSIGNED NOT NULL, \
  c char(120) NOT NULL, \
  pad char(60) NOT NULL, KEY(k) \
) ENGINE=InnoDB \
PARTITION BY HASH(id) PARTITIONS $partitions"

echo "Loading CSV files..."
time find $outputdir/1 -name $table |
parallel --will-cite -j 1 --eta --progress mysqlimport $defaults --silent --local --fields-terminated-by=, $database {}
echo "Done!"
